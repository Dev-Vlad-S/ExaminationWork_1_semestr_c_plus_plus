@startuml

DataBaseStudents <--* PersonalAccount
DataBaseClassRoomTeachers <--* AuthorizationPanel

Student <--* DataBaseStudents
DataBaseStudents <--* DataBase
DataBaseClassRoomTeachers <--* DataBase
DataBase <--* Application

IPainter <--* AuthorizationPanel
IPainter <|.. InputField

Object <|-- Button
Object <|-- InputLabel
Object <|-- Label
IPainter <|.. Object

CommandsHistoryPanel <--* CommandPanel
InputField <--* CommandPanel

Demonstration <--* PersonalAccount
OutPutPanel <--* PersonalAccount
CommandPanel <--* PersonalAccount
SplitLine <--* PersonalAccount
PersonalAccount <--* WorkSpace

Frame <--* AuthorizationPanel
Sections <--* AuthorizationPanel
Demonstration <--* AuthorizationPanel
AuthorizationPanel <--* WorkSpace
WorkSpace <--* Gui
MainWindow <--* Gui
Gui <--* Application

class Application
{
+ Application()
+ Run() : void

- database : database
- gui : Gui
}

class Gui
{
+ Gui()
+ getMainWindow() : MainWindow&
+ getWorkspace() : Workspace&
+ Draw() : void

- mainWindow : MainWindow
- workspace : Workspace
}

class WorkSpace
{
+ Draw() : void
+ getAuthorizationPanel() : AuthorizationPanel&
+ getPersonalAccount() : PersonalAccount&
+ WorkSpace()

- authorizationPanel : AuthorizationPanel
- personalAccount : PersonalAccount
}

class Student
{
+ AddMarks(line : string)
+ setMiddleName(middleName : string) : void
+ setLastName(lastName : string) : void
+ setFirstName(firstName : string) : void
+ getFirstName() : string
+ getLastName() : string
+ getMiddleName() : string
+ getSubjects() : vector<string>&
+ getMarks() : map<string, vector<string>>&
+ ~Student()
+ Student(line : string)
+ Student()

+ {static} id : int

- firstName : string
- lastName : string
- middleName : string
- subjects : vector<string> 
- marks : map<string, vector<string>>
}


class DataBaseStudents
{
+ ImportDataBaseStudents(path : string) : bool 
+ getStudents() : map<int, Student>&
+ DataBaseStudents()

- students : map<int, Student>
}

class DataBaseClassRoomTeachers
{
+ ReadInputAuthorizationData(inputedTeachersAutorizationData : map < string, map<string, string>>) : bool
+ DataBaseClassRoomTeachers()

- teachersAutorizationData : map < string, map<string, string>>
}

class DataBase
{
+ getDataBaseStudents : DataBaseStudents&
+ getDataBaseClassRoomTeachers : DataBaseClassRoomTeachers&
+ DataBase()

- dbStudents : DataBaseStudents
- dbClassRoomTeachers : DataBaseClassRoomTeachers
}


class PersonalAccount
{
+ InputCommands(key : KEY_EVENT_RECORD, dbStudents : DataBaseStudents&) : void
+ Draw() : void
+ getDemonstration() : bool
+ setDemonstartion(isDemonstration : bool) : void
+ PersonalAccount()

- ClearInputedSymbol() : void
- ClearInputedCommand() : void
- ImplementCommans(dbStudents : DataBaseStudents&) : void
- UpdateHistory() : void
- ReadFile(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- PrintStudents(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- AddStudent(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- DeleteByID(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- WriteToFile(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- RenameLastName(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- RenameFirstName(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- RenameMiddleName(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- AddMarksEvery(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- AddMark(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- UpdateMark(dbStudents : DataBaseStudents&, commandLine : vector<string>&) : bool
- CallHelp(commandLine : vector<string>&) : bool
- ListUpHistory() : void
- ListDownHistory() : void

- splitLine : SplitLine
- demonstration : Demonstration
- commandPanel : commandPanel
- outPutPanel : OutPutPanel
}

class SplitLine
{
+ Draw() : void
+ SplitLine(origin : COORD);
+ SplitLine()

- origin : COORD
}

class CommandsHistoryPanel
{
+ Draw() : void
+ resetPosition() : void
+ setPosition(pos : int)
+ getHistory : vector<string>
+ getPosition() : int
+ getHeight() : short
+ getOrigin() : COORD
+ CommandsHistoryPanel()

- Clear() : void

- position : int
- history : vector<string>
- indicator : string
- height : unsigned int
- origin : COORD
}

class CommandPanel
{
+ Draw() : void
+ ParsingCommandLine() : vector<string>
+ getInputField : InputField&
+ getCommandsHistoryPanel : CommandsHistoryPanel&
+ CommandPanel()

- inputedCommand : vector<string>
- height : short
- origin : COORD
- commandsHistoryPanel : CommandsHistoryPanel
- inputField : InputField
}

class OutPutPanel
{
+ DisplayHelp() : void
+ Display(dbStudents : DataBaseStudents&)
+ OutPutPanel(origin : COORD)
+ OutPutPanel()

- Clear() : void

- origin : COORD
}

class AuthorizationPanel
{
+ Draw() : void
+ SelectSection(key : KEY_EVENT_RECORD, dataBaseClassRoomTeachers : dataBaseClassRoomTeachers) : void
+ getStatusDemonstration() : bool
+ AuthorizationPanel()

- DrawSections() : void
- setOrigin() : void
- InputAutorizationData(ch : WCHAR) : void
- setSection(activeSection : int, key : PressedKey) : void
- ChecInputedAutorizationData(dbClassRoomTeachers : DataBaseClassRoomTeachers&) : void
- ClearInputedAutorizationData() : void
- DispayTip() : void
- Clear() : void


- demonstration : Demonstration
- origin : COORD
- frame : Frame
- objects : vector<IPainter*>
- Sections : enum
- section : Sections
- textSection : string
}

class Frame
{
+ Frame()
+ Draw(origin : const COORD&)
+ getWidth() : int
+ getHeight() : int

- symbolFrame : char
- width : int
- height : int
}

enum Sections
{
LOGIN
PASSWORD
GROUP
SINGIN 
}

interface IPainter
{
+ {abstract} Draw() : void
}

abstract class Object
{
+ setOrigin(origin : COORD) : void
+ getOrigin() : COORD
+ setText(text : string) : void
+ getText() : string


# Object(text : string, origin COORD)
# Object()

- {abstract} Draw() : void

# text : string
# origin : COORD
}

class Label
{
+ Draw() : void
+ SetColor(Colors color) : void
+ getline() : string
+ Label(text: string, origin : COORD, maxLength : int, indicator :  string)
+ Label()


# line : string

- Fill() : void

- color : Colors
- maxLenghth : int
- indicator : string
}

class InputLabel
{
+ Draw() : void
+ InputLineText(ch : WCHAR) : void
+ getOrigin() : COORD
+ clearSymbol(): void
+ clearAll(): void
+ setInputedLine(line : string) : void
+ getInputedLine() : string
+ getOrigin() : COORD
+ InputLabel(maxLength : int)
+ InputLabel()

- SetOrigin(origin : COORD) : void
- OffsetOrigin(offsetX : short, offsetY : short) : void

- maxLength : int
- inputedLine : string
}


class InputField
{
+ Draw() : void
+ getLabel() : Label*
+ getInputLabel : InputLabel*
+ InputField(text : string, maxLengthLabel : int, indicator : string, maxLengthInputLabel : int)
+ InputField();

- label : Label*
- inputLabel : InputLabel*
}

class Button
{
+ Draw() : void
+ setColor (color : Colors) : void
+ Button(tetx : string, origin : COORD)
+ Button()

- color : Colors
}

class MainWindow
{
+ MainWindow()
+ ResizeBufferWindow(wbsr : WINDOW_BUFFER_SIZE_RECORD) : void
}

class StatusBar
{
+{static} Draw (text : string) : void
-{static} Clear() : void

-{static} origin : COORD
-{static} indicator : string
-{static} cursorPosition : COORD
}

enum Demonstration
{
On
Off 
}

class ServiceVariables
{
+{static} consoleWindow : HWND
+{static} hInputBuffer : HANDLE
+{static} hOutputBuffer : HANDLE
+{static} cScrBufferInfo : CONSOLE_SCREEN_BUFFER_INFO
}


@enduml